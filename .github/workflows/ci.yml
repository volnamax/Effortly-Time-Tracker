name: CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:17.2
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: postgresdocker
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Wait for Database
        run: |
          for i in {1..10}; do
            nc -z localhost 5432 && echo "Database is ready" && exit 0
            echo "Waiting for database..."
            sleep 5
          done
          echo "Database not ready" && exit 1

      - name: Install PostgreSQL Client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Initialize Database
        run: |
          PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} psql -h localhost -U postgres -d postgresdocker -f src/Effortly-Time-Tracker/src/main/resources/sql/CreateTables.sql
        env:
          PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

      - name: Verify Roles in Database
        run: |
          PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} psql -h localhost -U postgres -d postgresdocker -c "SELECT * FROM roles;"
        env:
          PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

      # Unit Tests
      - name: Run Unit Tests
        env:
          SPRING_DATASOURCE_URL: "jdbc:postgresql://localhost:5432/postgresdocker"
          SPRING_DATASOURCE_USERNAME: ${{ secrets.POSTGRES_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: mvn -f src/Effortly-Time-Tracker/pom.xml clean test -Punit-tests

      # Integration Tests
      - name: Run Integration Tests
        env:
          SPRING_DATASOURCE_URL: "jdbc:postgresql://localhost:5432/postgresdocker"
          SPRING_DATASOURCE_USERNAME: ${{ secrets.POSTGRES_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: mvn -f src/Effortly-Time-Tracker/pom.xml test -Pintegration-tests

      # E2E Tests
      - name: Run E2E Tests
        env:
          SPRING_DATASOURCE_URL: "jdbc:postgresql://localhost:5432/postgresdocker"
          SPRING_DATASOURCE_USERNAME: ${{ secrets.POSTGRES_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: mvn -f src/Effortly-Time-Tracker/pom.xml  verify  -Pe2e-tests

      - name: Verify Test Results
        run: |
          echo "Surefire reports directory:"
          ls -la src/Effortly-Time-Tracker/target/surefire-reports
          echo "Surefire report content:"
          cat src/Effortly-Time-Tracker/target/surefire-reports/*.txt

      - name: Generate Allure Report with Maven
        run: mvn -f src/Effortly-Time-Tracker/pom.xml allure:report

      - name: Upload Allure Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: allure-report
          path: src/Effortly-Time-Tracker/target/allure-report

      - name: Deploy Allure Report to GitHub Pages
        if: success()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: src/Effortly-Time-Tracker/target/allure-report
